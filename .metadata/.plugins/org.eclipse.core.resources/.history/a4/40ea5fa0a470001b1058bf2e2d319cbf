/*
 * Code created using CCS v6 with TI compiler. Used TivaWare.
 * This code configures a Wide Timer to output a PWM of 50Hz.
 * By changing the duty it's possible to control a servo position
 */
#define PART_TM4C123GH6PM

#include <stdint.h>
#include <stdbool.h>
#include "stdlib.h"
#include "inc/hw_ints.h"
#include "inc/hw_memmap.h"
#include "inc/hw_uart.h"
#include "inc/hw_gpio.h"
#include "inc/hw_timer.h"
#include "inc/hw_types.h"
#include "driverlib/pin_map.h"
#include "driverlib/rom.h"
#include "driverlib/rom_map.h"
#include "driverlib/debug.h"
#include "driverlib/systick.h"
#include "driverlib/interrupt.h"
#include "driverlib/sysctl.h"
#include "driverlib/uart.h"
#include "driverlib/udma.h"
#include "driverlib/gpio.h"
#include "driverlib/timer.h"
#include <string.h>

#define  freq  50
#define Period  80000000/freq
#define dutyCycle1 Period-1-80000 //1ms positive width
#define dutyCycle2  Period-1-160000 //2ms positive width
//dutyCycle1 > dutyCycle2

uint32_t ServoWrite(uint32_t valor) {
    uint32_t i = 0;
    i = Period - ( (valor * 444) + 80000);
    TimerMatchSet(WTIMER0_BASE, TIMER_B, i);
}

int main(void) {
    SysCtlClockSet(SYSCTL_SYSDIV_2_5|SYSCTL_USE_PLL|SYSCTL_OSC_MAIN|SYSCTL_XTAL_16MHZ);

    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOC);
    SysCtlDelay(3);
    GPIOPinConfigure(GPIO_PC5_WT0CCP1);
    GPIOPinTypeTimer(GPIO_PORTC_BASE, GPIO_PIN_5);

    SysCtlPeripheralEnable(SYSCTL_PERIPH_WTIMER0);
    SysCtlDelay(3);
    TimerConfigure(WTIMER0_BASE, TIMER_CFG_SPLIT_PAIR|TIMER_CFG_B_PWM);
    TimerLoadSet(WTIMER0_BASE, TIMER_B, Period-1);
    TimerMatchSet(WTIMER0_BASE, TIMER_B, Period-1);

        /*
            This sets the 10th bit in the GPTMTBMR. This makes it so the match value only updates after the next timeout
        */
    HWREG(WTIMER0_BASE+TIMER_TBMR_TBMRSU) =1;

    TimerEnable(WTIMER0_BASE, TIMER_B);

    uint32_t i = 1;

    while(1){

        for(i = 1; i < 180; i++)
        {
            //TimerDisable(WTIMER0_BASE, TIMER_B);
            ServoWrite(i);
            //TimerEnable(WTIMER0_BASE, TIMER_B);
            SysCtlDelay(26600);
        }
        SysCtlDelay(20000);
        for(i = 180-1; i > 0; i--)
        {
            //TimerDisable(WTIMER0_BASE, TIMER_B);
            ServoWrite(i);
            //TimerEnable(WTIMER0_BASE, TIMER_B);
            SysCtlDelay(26600);
        }
        SysCtlDelay(20000);
    }

    return 0;
}
/*#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "inc/hw_ints.h"
#include "inc/hw_pwm.h"
#include "driverlib/sysctl.h"
#include "driverlib/interrupt.h"
#include "driverlib/gpio.h"
#include "driverlib/timer.h"
#include "driverlib/uart.h"
#include "driverlib/pin_map.h"
#include "driverlib/pwm.h"
#include "driverlib/adc.h"
#include "driverlib/rom.h"
#include "inc/hw_gpio.h"*/
/*

/**
 * main.c

//https://forum.43oh.com/topic/7171-using-hardware-pwm-on-tiva-launchpad/
//https://github.com/mathmagson/microservo9g_tm4c123g/blob/master/main.c
//https://www.ti.com/seclit/ml/ssqu015/ssqu015.pdf
//https://github.com/YashBansod/ARM-TM4C-CCS/blob/master/TM4C123G%20LaunchPad%20ADC%20Potentiometer/main.c
//https://github.com/ntua-cslep/Motor-Control-with-Tiva-EK-TM4C123GXL
volatile uint32_t servo;
#define SERVO_STEPS         180     // Maximum amount of steps in degrees (180 is common)
#define SERVO_MIN           11500//9500     // The minimum duty cycle for this servo
#define SERVO_MAX           40000//35100    // The maximum duty cycle
uint32_t COUNT[1];
volatile uint32_t giro;
unsigned long ulPeriod;
volatile uint32_t load;
int main(void)
{
    giro=75;
    //----------------------------------------INICIALIZACION DEL RELOJ-------------------------------------------
    SysCtlClockSet(SYSCTL_SYSDIV_5 | SYSCTL_USE_PLL |  SYSCTL_XTAL_16MHZ | SYSCTL_OSC_MAIN);
    //---------------------------------------INICIALIZACION DE PERIFERICOS---------------------------------------
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
    GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3);

    //---------------------------------------SETEO DE PINES COMO SALIDA (LEDS)----------------------------------
    HWREG(GPIO_PORTF_BASE + GPIO_O_LOCK) = GPIO_LOCK_KEY;
    HWREG(GPIO_PORTF_BASE + GPIO_O_CR) |= 0x01;
    HWREG(GPIO_PORTF_BASE + GPIO_O_LOCK) = 0;
    GPIODirModeSet(GPIO_PORTF_BASE, GPIO_PIN_4|GPIO_PIN_0, GPIO_DIR_MODE_IN);
    GPIOPadConfigSet(GPIO_PORTF_BASE, GPIO_PIN_4|GPIO_PIN_0, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);

//----------------------------------PWM-----------------------------------------------
//--------------------INISCIALIZACION DEL SISTEMA-------------------------------------

    SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM1);//se activa el perifericos PWM1
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD);//se activa el periferico D


    SysCtlPWMClockSet(SYSCTL_PWMDIV_64);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM1);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD);

//----------------------Se configura el  modo del pin---------------------------------
    GPIOPinTypePWM(GPIO_PORTD_BASE, GPIO_PIN_0); // se configura el pin PD0 como salidad de PWM
    GPIOPinConfigure(GPIO_PD0_M1PWM0);//se configura el pin PD0 como PWM1PWM0

//-------------------------Se desactiva el M0PWM0-----------------------------------

    ulPeriod = SysCtlClockGet() / 64; //se divide el reloj del sistema

    load=(ulPeriod/50)-1;//se divide el periodo por la frecuencia deseada del PWM y se realiza el ajuste con -1
    PWMGenConfigure(PWM1_BASE, PWM_GEN_0,PWM_GEN_MODE_DOWN);//se configura el PWM para contar de un numero haca abajo
    PWMGenPeriodSet(PWM1_BASE,PWM_GEN_0,/*loadload);//se especifica el periodo del PWM
/*
    PWMOutputState(PWM1_BASE,PWM_OUT_0_BIT,true); //se coloca el PWM como salida
    PWMGenEnable(PWM1_BASE,PWM_GEN_0);//se activa el PWM
//------------------------------Configutracion del timer0-----------------------------------------------
    SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0);
    TimerConfigure(TIMER0_BASE, TIMER_CFG_PERIODIC);
    TimerLoadSet(TIMER0_BASE, TIMER_A, (320000));
    TimerIntRegister(TIMER0_BASE,TIMER_A, ServoInt);
    TimerIntEnable(TIMER0_BASE,TIMER_TIMA_TIMEOUT);
    //-----------------------------------------SE ACTIVAN LAS INTERRUPCIONES DEL TIMER0------------------------------------
    IntEnable(INT_TIMER0A);
    //----------------------------------------ACTIVAMOS LAS INTERRUPCIONES--------------------------------------
    IntMasterEnable();
*/
//--------------------------------ADC-------------------------------------------------------------------
    /*SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
    GPIOPinTypeADC(GPIO_PORTB_BASE,GPIO_PIN_5);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);
    ADCSequenceConfigure(ADC0_BASE, 3, ADC_TRIGGER_PROCESSOR, 0);
    ADCSequenceStepConfigure(ADC0_BASE, 3, 0, ADC_CTL_CH11|ADC_CTL_IE|ADC_CTL_END);
    ADCSequenceEnable(ADC0_BASE,3);
    IntMasterEnable();

    while(1){

        ADCIntClear(ADC0_BASE, 3);
        ADCProcessorTrigger(ADC0_BASE, 3);
        while(!ADCIntStatus(ADC0_BASE, 3, false));
        ADCSequenceDataGet(ADC0_BASE, 3, COUNT);
        if(COUNT[0]>=1 && COUNT[0]<1365){
            GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_3, GPIO_PIN_3);
        }
        else{
            GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_3, 0x00);
        }
        if(COUNT[0]>=1365 && COUNT[0]<=2730){
            GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, GPIO_PIN_2);
        }
        else{
            GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, 0x00);
        }
        if(COUNT[0]>2730 && COUNT[0]<=4096){
            GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, GPIO_PIN_1);
        }
        else{
            GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, 0x00);
        }
        giro=(((125-35)/4095)*COUNT[0])+35;
        PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0, COUNT[0]); // SETA O DUTY CYCLE DO PWM
    }
	return 0;
}
*/
/*
#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/debug.h"
#include "driverlib/pwm.h"
#include "driverlib/pin_map.h"
#include "inc/hw_gpio.h"
#include "driverlib/rom.h"


#define PWM_FREQUENCY 55

int main(void)
{
    volatile uint32_t ui32Load;
    volatile uint32_t ui32PWMClock;
    volatile uint8_t ui8Adjust;
    ui8Adjust = 83;

    //SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_OSC_MAIN|SYSCTL_XTAL_16MHZ); // CLOCK 40 MHZ
    SysCtlClockSet(SYSCTL_SYSDIV_2_5|SYSCTL_USE_PLL|SYSCTL_XTAL_16MHZ|SYSCTL_OSC_MAIN); // CLOCK 80 MHZ
    SysCtlPWMClockSet(SYSCTL_PWMDIV_64); // SETA O CLOCK DO PWM POR: CLOCK_CPU/64

    SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM1); // HABILITA PWM
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD); // HABILITA PD
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF); // HABILITA PF

    GPIOPinTypePWM(GPIO_PORTD_BASE, GPIO_PIN_0); // DEFINIE PWM NO PINO PD0
    GPIOPinConfigure(GPIO_PD0_M1PWM0); // CONFIGURA PD0 COMO M1PWM0

    // INICIO HABILITA CHAVES SW1 E SW2
    HWREG(GPIO_PORTF_BASE + GPIO_O_LOCK) = GPIO_LOCK_KEY;
    HWREG(GPIO_PORTF_BASE + GPIO_O_CR) |= 0x01;
    HWREG(GPIO_PORTF_BASE + GPIO_O_LOCK) = 0;
    GPIODirModeSet(GPIO_PORTF_BASE, GPIO_PIN_4|GPIO_PIN_0, GPIO_DIR_MODE_IN);
    GPIOPadConfigSet(GPIO_PORTF_BASE, GPIO_PIN_4|GPIO_PIN_0, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);
    // FIM HABILITA CHAVES SW1 E SW2

    ui32PWMClock = SysCtlClockGet() / 64; // PEGA CLOCK DEFINIDO PARA O PWM
    ui32Load = (ui32PWMClock / PWM_FREQUENCY) - 1; // PEGA O CLOCK DO PWM E DIVIDE PELO CLOCK COM QUE SE QUER TRABALHAR SUBTRAINDO 1 POR CONTAR ATÉ 0
    PWMGenConfigure(PWM1_BASE, PWM_GEN_0, PWM_GEN_MODE_DOWN); // CONFIGURA O CONTADOR COMO DECRESCENTE
    PWMGenPeriodSet(PWM1_BASE, PWM_GEN_0, ui32Load); // SETA O CONTADOR

    PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0, ui8Adjust * ui32Load / 1000); // DIVIDE-SE O CONTADOR POR 1000 E FAZ A MULTIPLICACAO PARA AJUSTE PARA 1.51ms (MEIO DA POSICAO DO SERVO)
    PWMOutputState(PWM1_BASE, PWM_OUT_0_BIT, true); // CONFIGURA PWM Module 1 COMO SAIDA
    PWMGenEnable(PWM1_BASE, PWM_GEN_0); // HABILITA GERACAO DE PWM

    while(1)
    {

        if(GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_4)==0x00) // VERIFICA SE O PINO PF4 FOI PRESSIONADO
        {
            ui8Adjust--;
            if (ui8Adjust < 56)
            {
                ui8Adjust = 56; // TRAVA NO LIMITE DE 1mS
            }
            PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0, ui8Adjust * ui32Load / 1000); // SETA O DUTY CYCLE DO PWM
        }

        if(GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_0)==0x00)  // VERIFICA SE O PINO PF0 FOI PRESSIONADO
        {
            ui8Adjust++;
            if (ui8Adjust > 111)
            {
                ui8Adjust = 111; // TRAVA NO LIMITE DE 2mS
            }
            PWMPulseWidthSet(PWM1_BASE, PWM_OUT_0, ui8Adjust * ui32Load / 1000); // SETA O DUTY CYCLE DO PWM
        }

        SysCtlDelay(100000); // SETA A VELOCIDADE DA REPETICAO SOMENTE
    }

}
*/
